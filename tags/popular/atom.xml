<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>popular on midFang&#39;s Blog</title>
    <link>https://midFang.github.io/tags/popular.html</link>
    <description>Recent content in popular on midFang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2018 16:01:23 +0800</lastBuildDate>
    
	<atom:link href="https://midFang.github.io/tags/popular/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An Example Post</title>
      <link>https://midFang.github.io/about.html</link>
      <pubDate>Mon, 01 Jan 2018 16:01:23 +0800</pubDate>
      
      <guid>https://midFang.github.io/about.html</guid>
      <description>Asdfadsfasdf Asdfadsfasdf Asdfadsfasdf Asdfadsfasdf</description>
    </item>
    
    <item>
      <title>An Example Post</title>
      <link>https://midFang.github.io/post/arraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html</link>
      <pubDate>Mon, 01 Jan 2018 16:01:23 +0800</pubDate>
      
      <guid>https://midFang.github.io/post/arraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html</guid>
      <description>开篇之前, 想想下面几个问题的答案是什么? 有的时候我们看源码也是, 并不是说一味盲目的直接跑到源码中去看, 我们带着这几个问题去阅读源码, 反而会轻</description>
    </item>
    
    <item>
      <title>An Example Post</title>
      <link>https://midFang.github.io/post/eventbus-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html</link>
      <pubDate>Mon, 01 Jan 2018 16:01:23 +0800</pubDate>
      
      <guid>https://midFang.github.io/post/eventbus-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html</guid>
      <description>EventBus 是一种用于 Android 的事件发布-订阅总线, 是一个可以实现组件间通信的一个第三方框架, 使用起来非常的简单, 一共也就是 4 个步骤, 注册订阅, 发送事件, 解</description>
    </item>
    
    <item>
      <title>An Example Post</title>
      <link>https://midFang.github.io/post/java-%E4%B8%AD%E7%9A%84-monitor.html</link>
      <pubDate>Mon, 01 Jan 2018 16:01:23 +0800</pubDate>
      
      <guid>https://midFang.github.io/post/java-%E4%B8%AD%E7%9A%84-monitor.html</guid>
      <description>什么是 Monitor? Java 虚拟机给每个对象和 class 字节码都设置了一个监听器 Monitor，用于检测并发代码的重入，同时在 Object 类中还提供了 notify 和 wait 方法来对线程进行控制</description>
    </item>
    
    <item>
      <title>An Example Post</title>
      <link>https://midFang.github.io/post/java-%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B.html</link>
      <pubDate>Mon, 01 Jan 2018 16:01:23 +0800</pubDate>
      
      <guid>https://midFang.github.io/post/java-%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B.html</guid>
      <description>假设有 3 个类, 他们的继承关系是这样的 public class Person { } public class Gril extends Person { } public class Boy extends Person { } public class Father { } 在类上指定的泛型, 那么在当前类, 使用的都是这个对象 public class MyTest&amp;lt;T&amp;gt;</description>
    </item>
    
    <item>
      <title>An Example Post</title>
      <link>https://midFang.github.io/post/kotlin-%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0-let-with-run-apply-also-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2.html</link>
      <pubDate>Mon, 01 Jan 2018 16:01:23 +0800</pubDate>
      
      <guid>https://midFang.github.io/post/kotlin-%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0-let-with-run-apply-also-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%88%9D%E6%8E%A2.html</guid>
      <description>最近的项目中也是基本处于是逐渐切换 Kotlin 的状态, 以下是在项目中经常使用到的几个扩展函数, 做一个记录, 不得不说有的时候真的比 Java 方便很多 内联扩展函数</description>
    </item>
    
    <item>
      <title>An Example Post</title>
      <link>https://midFang.github.io/post/xxxasx.html</link>
      <pubDate>Mon, 01 Jan 2018 16:01:23 +0800</pubDate>
      
      <guid>https://midFang.github.io/post/xxxasx.html</guid>
      <description>代码中数据结构是这样的 class Node { // 存储下一个节点 Node next; String mes; public Node(String mes) { this.mes = mes; } } 插入</description>
    </item>
    
    <item>
      <title>An Example Post</title>
      <link>https://midFang.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8.html</link>
      <pubDate>Mon, 01 Jan 2018 16:01:23 +0800</pubDate>
      
      <guid>https://midFang.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E9%93%BE%E8%A1%A8.html</guid>
      <description>nisdfaisdfasdfa anidf andif 手写一个简单的单链表的增删改查, 本文不注重代码的严谨格式等, 仅仅是探究其实现的思想 假如我们需要添加一个数据 代码中数据结构是这样的 class Node {</description>
    </item>
    
    <item>
      <title>An Example Post</title>
      <link>https://midFang.github.io/posts.html</link>
      <pubDate>Mon, 01 Jan 2018 16:01:23 +0800</pubDate>
      
      <guid>https://midFang.github.io/posts.html</guid>
      <description>Asdfadsfasdf Asdfadsfasdf Asdfadsfasdf</description>
    </item>
    
  </channel>
</rss>